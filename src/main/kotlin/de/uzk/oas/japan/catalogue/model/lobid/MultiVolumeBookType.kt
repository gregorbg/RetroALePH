package de.uzk.oas.japan.catalogue.model.lobid

import de.uzk.oas.japan.catalogue.model.lobid.serial.ListWrappingSerializer
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

interface MultiVolumeBookData

// TODO this subclassing is pure c/p, maybe something about type hierarchy is not right?
sealed class MultiVolumeBookType : BookType(), MultiVolumeBookData {
    @Serializable
    data class ReferenceSource(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String
    ) : MultiVolumeBookType()

    @Serializable
    data class Bibliography(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String
    ) : MultiVolumeBookType()

    @Serializable
    data class Proceedings(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String
    ) : MultiVolumeBookType()

    @Serializable
    data class Festschrift(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String
    ) : MultiVolumeBookType()

    @Serializable
    data class Thesis(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        override val thesisInformation: List<String> = emptyList(),
        @SerialName("@context") val context: String,
    ) : MultiVolumeBookType(), ThesisData

    @Serializable
    data class Biography(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String,
    ) : MultiVolumeBookType(), BiographyData

    @Serializable
    data class PublicationIssue(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String,
    ) : MultiVolumeBookType()

    @Serializable
    data class Schoolbook(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String,
    ) : MultiVolumeBookType()

    @Serializable
    data class Map(
        override val id: String? = null,
        @SerialName("type") override val types: List<String>,
        @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
        @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
        @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
        @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
        override val hasItem: List<HasItem>,
        @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
        @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
        @SerialName("medium") override val media: List<IdentifiableResource>,
        @SerialName("subject") override val subjects: List<Subject> = emptyList(),
        @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
        override val title: String,
        override val hbzId: String,
        override val isPartOf: List<IsPartOf> = emptyList(),
        override val oclcNumber: List<String> = emptyList(),
        override val otherTitleInformation: List<String> = emptyList(),
        override val publication: List<Publication>,
        override val sameAs: List<IdentifiableResource>,
        override val describedBy: DescribedBy,
        override val tableOfContents: List<IdentifiableResource> = emptyList(),
        override val natureOfContent: List<NatureOfContent> = emptyList(),
        override val edition: List<String> = emptyList(),
        override val exampleOfWork: ExampleOfWork? = null,
        override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
        @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
        @SerialName("note") override val notes: List<String> = emptyList(),
        @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
        @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
        override val inCollection: List<InCollection> = emptyList(),
        override val related: List<Related> = emptyList(),
        override val corporateBodyForTitle: List<String> = emptyList(),
        override val bibliographicCitation: String? = null,
        @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
        @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
        override val similar: List<Similar> = emptyList(),
        @SerialName("abstract") override val abstracts: List<String> = emptyList(),
        @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
        @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
        override val hasVersion: List<IdentifiableResource> = emptyList(),
        override val primaryForm: List<IdentifiableResource> = emptyList(),
        override val fulltextOnline: List<IdentifiableResource> = emptyList(),
        override val urn: List<String> = emptyList(),
        override val doi: List<String> = emptyList(),
        override val isbn: List<String> = emptyList(),
        override val spatial: List<Spatial> = emptyList(),
        @SerialName("@context") val context: String,
    ) : MultiVolumeBookType()
}

@Serializable
data class MultiVolumeBook(
    override val id: String? = null,
    @SerialName("type") override val types: List<String>,
    @SerialName("label") @Serializable(with = ListWrappingSerializer::class) override val labels: List<String> = emptyList(),
    @SerialName("altLabel") @Serializable(with = ListWrappingSerializer::class) override val alternativeLabels: List<String> = emptyList(),
    @SerialName("contribution") override val contributions: List<Contribution> = emptyList(),
    @Serializable(with = ListWrappingSerializer::class) override val extent: List<String> = emptyList(),
    override val hasItem: List<HasItem>,
    @SerialName("responsibilityStatement") override val responsibilityStatements: List<String> = emptyList(),
    @SerialName("language") override val languages: List<IdentifiableResource> = emptyList(),
    @SerialName("medium") override val media: List<IdentifiableResource>,
    @SerialName("subject") override val subjects: List<Subject> = emptyList(),
    @SerialName("subjectAltLabel") @Serializable(with = ListWrappingSerializer::class) override val subjectAlternativeLabels: List<String> = emptyList(),
    override val title: String,
    override val hbzId: String,
    override val isPartOf: List<IsPartOf> = emptyList(),
    override val oclcNumber: List<String> = emptyList(),
    override val otherTitleInformation: List<String> = emptyList(),
    override val publication: List<Publication>,
    override val sameAs: List<IdentifiableResource>,
    override val describedBy: DescribedBy,
    override val tableOfContents: List<IdentifiableResource> = emptyList(),
    override val natureOfContent: List<NatureOfContent> = emptyList(),
    override val edition: List<String> = emptyList(),
    override val exampleOfWork: ExampleOfWork? = null,
    override val containsExampleOfWork: List<ExampleOfWork> = emptyList(),
    @SerialName("alternativeTitle") override val alternativeTitles: List<String> = emptyList(),
    @SerialName("note") override val notes: List<String> = emptyList(),
    @SerialName("predecessor") override val predecessors: List<IdentifiableResource> = emptyList(),
    @SerialName("successor") override val successors: List<IdentifiableResource> = emptyList(),
    override val inCollection: List<InCollection> = emptyList(),
    override val related: List<Related> = emptyList(),
    override val corporateBodyForTitle: List<String> = emptyList(),
    override val bibliographicCitation: String? = null,
    @SerialName("titleKeyword") override val titleKeywords: List<String> = emptyList(),
    @SerialName("description") override val descriptions: List<IdentifiableResource> = emptyList(),
    override val similar: List<Similar> = emptyList(),
    @SerialName("abstract") override val abstracts: List<String> = emptyList(),
    @SerialName("supplement") override val supplements: List<IdentifiableResource> = emptyList(),
    @SerialName("shortTitle") override val shortTitles: List<String> = emptyList(),
    override val hasVersion: List<IdentifiableResource> = emptyList(),
    override val primaryForm: List<IdentifiableResource> = emptyList(),
    override val fulltextOnline: List<IdentifiableResource> = emptyList(),
    override val urn: List<String> = emptyList(),
    override val doi: List<String> = emptyList(),
    override val isbn: List<String> = emptyList(),
    override val spatial: List<Spatial> = emptyList(),
    @SerialName("@context") val context: String,
    val issn: List<String> = emptyList(),
    val titleOfSubSeries: String? = null,
    val dateOfBirth: String? = null, // FIXME GB wrong! report on GitHub!
    val dateOfDeath: String? = null, // FIXME GB wrong! report on GitHub!
) : BookType(), MultiVolumeBookData